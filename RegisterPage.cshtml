@{
    if (WebSecurity.IsAuthenticated)
    {
        Response.Redirect("~/Default-Page");
    }
    // Initialize general page variables
    var email = "";
    var password = "";
    var confirmPassword = "";
    // Setup validation
    Validation.RequireField("email", "Je moet een email specificeren.");
    Validation.RequireField("password", "Wachtwoord mag niet leeg zijn.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("password", "Wachtwoord confirmatie komt niet overeen."));
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Wachtwoord moet minstens 6 characters lang zijn"));
    // If this is a POST request, validate and process data
    if (IsPost)
    {
        AntiForgery.Validate();
        email = Request.Form["email"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];
        // Validate the user's captcha answer
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     ModelState.AddError("recaptcha", "Captcha response was not correct");
        // }
        // If all information is valid, create a new account
        if (Validation.IsValid())
        {
            // Insert a new user into the database
            var db = Database.Open("StarterSite");
            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null)
            {
                // Insert email into the profile table
                db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);
                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try
                {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation)
                    {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));
                        WebMail.Send(
                            to: email,
                            subject: "Activeer a.u.b. uw account",
                            body: "Uw activerings code is: " + token + ". Bezoek <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> om uw account te activeren."
                        );
                    }
                    if (requireEmailConfirmation)
                    {
                        // Thank the user for registering and let them know an email is on its way
                        Response.Redirect("~/Default-Page");
                    }
                    else
                    {
                        // Navigate back to the homepage and exit
                        WebSecurity.Login(email, password);
                        Response.Redirect("~/Default-Page");
                    }
                }
                catch (System.Web.Security.MembershipCreateUserException e)
                {
                    ModelState.AddFormError(e.Message);
                }
            }
            else
            {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }
        }
    }
}
<!DOCTYPE html>
<html lang="en">
    <head>
        <link href="~/css/Logo.css" rel="stylesheet" type="text/css" />
        <!-- Latest compiled and minified CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">
        <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css">
        <link rel="stylesheet" href="~/css/main.css" />
        <link rel="stylesheet" href="~/css/Logo.css" /><!--Responsive Mobiel-->
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
        <meta charset="utf-8" />
        <title>E-Books Online - Registreer</title>
    </head>
    <body>
        <div class="container">
            <div class="row">
                <div class="col-xs-12 col-xs-offset-0 col-md-6 col-md-offset-3">
                    <h1 class="title" data-shadow="E-Books Online">Registreer</h1>
                    <div class="panel text-center">
                        <a href="Index"><img alt="logo" src="Images/logo.png" height="150" width="150" style="margin-top: 40px;" /></a>
                        <form method="post" class="form-style-7" id="registerForm">
                            @AntiForgery.GetHtml()
                            @Html.ValidationSummary()
                            <ul style="width: 60%; margin: 0 auto;">
                                <li class="email">
                                    <label for="email" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text>      }>E-Mail</label>
                                    <input type="text" maxlength="50" tabindex="1" id="email" name="email" value="@email" @Validation.For("email") />
                                </li>
                                <li class="password">
                                    <label for="password" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text>      }>Wachtwoord</label>
                                    <input type="password" maxlength="50" tabindex="2" id="password" name="password" @Validation.For("password") />
                                </li>
                                <li class="confirmPassword">
                                    <label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword")) { <text> class="error-label" </text>      }>Wachtwoord herhalen</label>
                                    <input type="password" maxlength="50" tabindex="3" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") />
                                </li>
                                <li style="border: none;">
                                    <input type="submit" value="Registreer" />
                                </li>
                            </ul>
                        </form>
                    </div>
                    <p>
                        <a href="Index">Terug</a></p>
                </div>
            </div>
        </div>
        <script src="js/jquery.js"></script>
        <script src="js/bootstrap.min.js"></script>
        <script>
            $(document).ready(function () {
                $('.validation-summary-errors ul').attr("style", "list-style:none;");
                $('.validation-summary-errors li').addClass("isa_warning");
                $('.validation-summary-errors').removeClass().attr("style", "max-width:500px;margin: 0 auto;");
            });
        </script>
        <script src="~/Scripts/jquery.validate.min.js"></script>
        <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    </body>
</html>
